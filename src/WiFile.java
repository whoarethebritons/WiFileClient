
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import javax.jmdns.ServiceTypeListener;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Eden
 */
public class WiFile extends javax.swing.JFrame implements ServiceListener {
        static JmDNS mJmdns;
        ServiceInfo current;
        DefaultListModel services = new DefaultListModel();
        final static String TYPE = "_ftp._tcp.local.";
        BufferedImage icon;
        WiFile(JmDNS jmdns) {
            try{
                BufferedImage icon = ImageIO.read(new File("C:/Users/Eden/workspace/WiFileClient/wifileicon.png"));
            }
            catch(IOException e) {
                e.printStackTrace();
            }
            initComponents();
            
            mJmdns = jmdns;
            mJmdns.addServiceListener(TYPE, this);
        }
        
        
        @Override
        public void serviceAdded(ServiceEvent event) {
            //System.out.println("Service added   : " + event.getName() + "." + event.getType());
            final String name = event.getName();
        
            System.out.println("ADD: " + name);
            SwingUtilities.invokeLater(new Runnable() {
            public void run() { services.addElement(name); }
            });
            //mJmdns.requestServiceInfo(event.getType(), event.getName());
        }

        @Override
        public void serviceRemoved(ServiceEvent event) {
            final String name = event.getName();

            System.out.println("REMOVE: " + name);
            SwingUtilities.invokeLater(new Runnable() {
            public void run() { services.removeElement(name); }
            });
        }

        @Override
        public void serviceResolved(ServiceEvent event) {
            String name = event.getName();
        String type = event.getType();
        ServiceInfo info = event.getInfo();

        if (name.equals(serviceList.getSelectedValue())) {
            if (info == null) {
                this.info.setText("service not found");
            } else {
                StringBuilder buf = new StringBuilder();
                buf.append(name);
                buf.append('.');
                buf.append(type);
                buf.append('\n');
                buf.append(info.getAddress());
                buf.append(':');
                buf.append(info.getPort());
                buf.append('\n');
                for (Enumeration names = info.getPropertyNames() ; names.hasMoreElements() ; ) {
                    String prop = (String)names.nextElement();
                    buf.append(prop);
                    buf.append('=');
                    buf.append(info.getPropertyString(prop));
                    buf.append('\n');
                }
                
                this.info.setText(buf.toString());
            }
        }
        }
        
    /**
     * Creates new form WiFile
     */
    public WiFile(){
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RestartButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        StartButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        info = new javax.swing.JTextArea();
        ConnectButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        serviceList = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WiFile");
        setIconImage(icon);
        setIconImages(null);

        RestartButton.setText("Restart");
        RestartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestartButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        label1.setText("Available Devices");

        label2.setText("Information");

        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        info.setColumns(20);
        info.setRows(5);
        jScrollPane1.setViewportView(info);

        ConnectButton.setText("Connect to Service");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        serviceList = new JList(services);
        serviceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                serviceListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(serviceList);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Settings");

        jMenuItem1.setText("jMenuItem1");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RestartButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(StartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ConnectButton)
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(StartButton)
                                .addGap(7, 7, 7)
                                .addComponent(RestartButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StopButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConnectButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RestartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestartButtonActionPerformed
        // TODO add your handling code here:
        if(mJmdns == null) {
            mJmdns.addServiceListener(TYPE, this);
        }
    }//GEN-LAST:event_RestartButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // TODO add your handling code here:
        try {
            mJmdns.close();
            System.out.println("service discovery stopped");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_StopButtonActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        if(mJmdns == null) {
            mJmdns.addServiceListener(TYPE, this);
        } else {
            //notify that it is already discovering
        }
    }//GEN-LAST:event_StartButtonActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        // TODO add your handling code here:
        Pearin p = new Pearin(this, true);
        p.setVisible(true);
        
        if(p.getReturnStatus() == 1) {
            Pearin f = new Pearin(this, true);
                    f.setVisible(true);
                    f.setLabel("Connection failed");
                    
            if(current != null && current.hasData()) {
                /*java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {*/
                /*
                try {
                    
                    System.out.println("I AM HERE");
                    Socket sock = new Socket(current.getAddress(), current.getPort());
                    System.out.println("or here");
                    DataInputStream is = new DataInputStream(sock.getInputStream());
                    System.out.println("or here");
                    int input = is.readInt();
                    System.out.println(input);
                    sock.close();
                    */
                Loading load1 = new Loading(current.getInetAddress(), current.getPort(), true);
                              
                
                    load1.setVisible(true);
                
                        
                    //WiFileClient wfc = new WiFileClient(info.getInetAddress(), input);
                    System.out.println("success");
                 /*   
                } catch (ConnectException e) {
                    System.out.println("connect exception caught");
                    return;
                    /*
                    Pearin f = new Pearin(this, true);
                    f.setVisible(true);
                    f.setLabel("Connection failed");
                    
                } catch (IOException e) {
                    e.printStackTrace();
                } 
                    */
                //}});
            }
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void serviceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_serviceListValueChanged
        // TODO add your handling code here:
        String name = (String)serviceList.getSelectedValue();
        if (name == null) {
            info.setText("unknown");
        } else {
            //System.out.flush();
            current = mJmdns.getServiceInfo(TYPE, name);
            if (current == null || !current.hasData()) {
                info.setText("service not found");
            } else {
                mJmdns.requestServiceInfo(TYPE, name);
            }
        }
    }//GEN-LAST:event_serviceListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Runtime.getRuntime().addShutdownHook(new Thread()
            {
                @Override
                public void run()
                {
                    System.out.println("Shutdown hook ran!");
                    try {
                        mJmdns.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    InetAddress mIP;
                    mIP = InetAddress.getLocalHost();
                    String mHostname = InetAddress.getByName(mIP.getHostName()).toString();
                    System.out.println(mIP.toString());
                    new WiFile(JmDNS.create(mIP, mHostname)).setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(WiFile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(WiFile.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private javax.swing.JButton RestartButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JTextArea info;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JList serviceList;
    // End of variables declaration//GEN-END:variables
}
