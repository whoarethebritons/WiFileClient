import javax.jmdns.JmDNS;
import javax.jmdns.ServiceEvent;
import javax.jmdns.ServiceInfo;
import javax.jmdns.ServiceListener;
import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Eden
 */
public class WiFile extends javax.swing.JFrame implements ServiceListener {
        //swing variables
        static boolean mOpen;
        private static final String imageName = "/wifile.jpg";
        Image icon;

        //variables for properties
        String proplocal = "wifilesettings.properties";
        static Properties mProperties = new Properties();
        static String DEVICE_KEY = "DEVICE_NAME_KEY", FILE_KEY = "FILE_LOCATION_KEY";

        //service broadcast variables
        static JmDNS mJmdns;
        final static String TYPE = "_ftp._tcp.local.";
        ServiceInfo me;
        ServiceInfo current;
        DefaultListModel services = new DefaultListModel();
        String myName;

        public WiFile setmJmdns(JmDNS jmdns) {
            mJmdns = jmdns;
            normal();
            return this;
        }

        public void normal() {
            try {
                icon = createImage(imageName, "icon");
                //passes in saved name value
                String prop = mProperties.getProperty(DEVICE_KEY, "DNS");
                //registers service
                me = registerWiFile(prop);
                mJmdns.registerService(me);
            } catch (IOException e) {
                e.printStackTrace();
            }
            //initializes gui
            initComponents();
            //starts service listener
            mJmdns.addServiceListener(TYPE, this);
        }

        public ServiceInfo registerWiFile(String string) {
            //registers WiFile so that phone can see client exists
            try {
                ServerSocket s = new ServerSocket(0);
                int wfPort = s.getLocalPort();
                myName = string + "WiFile";
                return ServiceInfo.create("_ftp._tcp.local.", myName, wfPort,
                        "computer WiFile service");
                
            } catch (IOException e) {
                return null;
            }
        }
        
        
        @Override
        public void serviceAdded(ServiceEvent event) {
            final String name = event.getName();
            if(name.equals(myName)) {
                //don't add self
            }else {
                //adds to list
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        services.addElement(name);
                    }
                });
            }
        }

        @Override
        public void serviceRemoved(ServiceEvent event) {
            final String name = event.getName();
            //removes from list
            SwingUtilities.invokeLater(new Runnable() {
            public void run() { services.removeElement(name); }
            });
        }

        @Override
        public void serviceResolved(ServiceEvent event) {
            //gets all of the service information from jmdns

            String name = event.getName();
            String type = event.getType();
            ServiceInfo info = event.getInfo();

            if (name.equals(serviceList.getSelectedValue())) {
                if (info == null) {
                    this.info.setText("service not found");
                } else {
                    StringBuilder buf = new StringBuilder();
                    buf.append(name);
                    buf.append('.');
                    buf.append(type);
                    buf.append('\n');
                    buf.append(info.getAddress());
                    buf.append(':');
                    buf.append(info.getPort());
                    buf.append('\n');
                    for (Enumeration names = info.getPropertyNames() ; names.hasMoreElements() ; ) {
                        String prop = (String)names.nextElement();
                        buf.append(prop);
                        buf.append('=');
                        buf.append(info.getPropertyString(prop));
                        buf.append('\n');
                    }
                    this.info.setText(buf.toString());
                }
            }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ServiceLabel = new JLabel();
        InfoLabel = new JLabel();
        MyServiceLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        info = new javax.swing.JTextArea();
        ConnectButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        serviceList = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        SettingsMenu = new javax.swing.JMenu();
        SettingsItem = new javax.swing.JMenuItem();

        //when WiFile window is closed, close the service discovery
        //and say that it's not open
        //this way the system tray icon can check if it is open or not
        addWindowListener( new WindowAdapter()
        {
            public void windowClosing(WindowEvent e)
            {
                JFrame frame = (JFrame)e.getSource();
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        try {
                            mJmdns.close();
                            mOpen = false;
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                });
            }
        });
        setTitle("WiFile");
        setIconImage(icon);
        setIconImages(null);

        ServiceLabel.setText("Available Devices");

        InfoLabel.setText("Information");
        MyServiceLabel.setText("My Service Name: " + myName);

        info.setColumns(20);
        info.setRows(5);
        jScrollPane1.setViewportView(info);

        ConnectButton.setText("Connect to Service");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        serviceList = new JList(services);
        serviceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                serviceListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(serviceList);

        SettingsMenu.setText("Settings");

        SettingsItem.setText("Open Settings");
        SettingsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsItemActionPerformed(evt);
            }
        });
        SettingsMenu.add(SettingsItem);

        jMenuBar1.add(SettingsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(MyServiceLabel)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ServiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(InfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(ConnectButton)
                                                .addGap(19, 19, 19)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(MyServiceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ServiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(InfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ConnectButton)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(jScrollPane2))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        // TODO add your handling code here:
        //asks user if they want to connect
        DialogBox p = new DialogBox(this, true);
        p.setVisible(true);

        //if they do
        if(p.getReturnStatus() == 1) {
            if(current != null && current.hasData()) {
                //this connects to the service to get port & files
                Loading load1 = new Loading(current.getInetAddress(), current.getPort(), true);
            }
            //otherwise say connection failed
        } else {
            JOptionPane.showMessageDialog(this,
                    "Connection Failed",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void serviceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_serviceListValueChanged
        // TODO add your handling code here:
        String name = (String)serviceList.getSelectedValue();
        if (name == null) {
            info.setText("unknown");
        } else {
            current = mJmdns.getServiceInfo(TYPE, name);
            if (current == null || !current.hasData()) {
                info.setText("service not found");
            } else {
                mJmdns.requestServiceInfo(TYPE, name);
            }
        }
    }//GEN-LAST:event_serviceListValueChanged

    private void SettingsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsItemActionPerformed
        // TODO add your handling code here:
        new Settings().setVisible(true);

    }//GEN-LAST:event_SettingsItemActionPerformed


    //default constructor
    WiFile() {
        mOpen = true;
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            if(UIManager.getLookAndFeel() == null) {
                javax.swing.UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WiFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Runtime.getRuntime().addShutdownHook(new Thread()
            {
                @Override
                public void run()
                {
                    try {
                        mJmdns.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    InetAddress mIP;
                    mIP = InetAddress.getLocalHost();
                    String mHostname = InetAddress.getByName(mIP.getHostName()).toString();
                    setmJmdns(JmDNS.create(mIP, mHostname)).setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(WiFile.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(WiFile.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
    }

    //Obtain the image URL
    protected static Image createImage(String path, String description) {
        URL imageURL = BackgroundWiFile.class.getResource(imageName);

        if (imageURL == null) {
            System.err.println("Resource not found: " + path);
            return null;
        } else {
            return (new ImageIcon(imageURL, description)).getImage();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private javax.swing.JTextArea info;
    private javax.swing.JMenu SettingsMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem SettingsItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private JLabel ServiceLabel;
    private JLabel InfoLabel;
    private JLabel MyServiceLabel;
    private javax.swing.JList serviceList;
    // End of variables declaration//GEN-END:variables
}
